// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/si-bas/go-rest-boilerplate/domain/model"

	pagination "github.com/si-bas/go-rest-boilerplate/shared/helper/pagination"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CountByEmail provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) CountByEmail(_a0 context.Context, _a1 string) (*int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(context.Context, string) *int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilteredDb provides a mock function with given fields: _a0
func (_m *UserRepository) FilteredDb(_a0 model.UserFilter) *gorm.DB {
	ret := _m.Called(_a0)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(model.UserFilter) *gorm.DB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// FindByEmail provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) FindByEmail(_a0 context.Context, _a1 string) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) FindById(_a0 context.Context, _a1 uint32) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) GetFiltered(_a0 context.Context, _a1 model.UserFilter) ([]model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.UserFilter) []model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginate provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserRepository) GetPaginate(_a0 context.Context, _a1 model.UserFilter, _a2 pagination.Param) ([]model.User, *pagination.Param, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.UserFilter, pagination.Param) []model.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 *pagination.Param
	if rf, ok := ret.Get(1).(func(context.Context, model.UserFilter, pagination.Param) *pagination.Param); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Param)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, model.UserFilter, pagination.Param) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) Insert(_a0 context.Context, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
